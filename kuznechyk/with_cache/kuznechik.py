from binascii import hexlify, unhexlify
from datetime import datetime
import time

original_key = "8899aabbccddeeff0011223344556677fedcba98765432100123456789abcdef"
key = unhexlify(original_key)

block_size = 16
pi = [0xfc, 0xee, 0xdd, 0x11, 0xcf, 0x6e, 0x31, 0x16, 0xfb, 0xc4, 0xfa, 0xda, 0x23, 0xc5, 0x04, 0x4d,
    0xe9, 0x77, 0xf0, 0xdb, 0x93, 0x2e, 0x99, 0xba, 0x17, 0x36, 0xf1, 0xbb, 0x14, 0xcd, 0x5f, 0xc1,
    0xf9, 0x18, 0x65, 0x5a, 0xe2, 0x5c, 0xef, 0x21, 0x81, 0x1c, 0x3c, 0x42, 0x8b, 0x01, 0x8e, 0x4f,
    0x05, 0x84, 0x02, 0xae, 0xe3, 0x6a, 0x8f, 0xa0, 0x06, 0x0b, 0xed, 0x98, 0x7f, 0xd4, 0xd3, 0x1f,
    0xeb, 0x34, 0x2c, 0x51, 0xea, 0xc8, 0x48, 0xab, 0xf2, 0x2a, 0x68, 0xa2, 0xfd, 0x3a, 0xce, 0xcc,
    0xb5, 0x70, 0x0e, 0x56, 0x08, 0x0c, 0x76, 0x12, 0xbf, 0x72, 0x13, 0x47, 0x9c, 0xb7, 0x5d, 0x87,
    0x15, 0xa1, 0x96, 0x29, 0x10, 0x7b, 0x9a, 0xc7, 0xf3, 0x91, 0x78, 0x6f, 0x9d, 0x9e, 0xb2, 0xb1,
    0x32, 0x75, 0x19, 0x3d, 0xff, 0x35, 0x8a, 0x7e, 0x6d, 0x54, 0xc6, 0x80, 0xc3, 0xbd, 0x0d, 0x57,
    0xdf, 0xf5, 0x24, 0xa9, 0x3e, 0xa8, 0x43, 0xc9, 0xd7, 0x79, 0xd6, 0xf6, 0x7c, 0x22, 0xb9, 0x03,
    0xe0, 0x0f, 0xec, 0xde, 0x7a, 0x94, 0xb0, 0xbc, 0xdc, 0xe8, 0x28, 0x50, 0x4e, 0x33, 0x0a, 0x4a,
    0xa7, 0x97, 0x60, 0x73, 0x1e, 0x00, 0x62, 0x44, 0x1a, 0xb8, 0x38, 0x82, 0x64, 0x9f, 0x26, 0x41,
    0xad, 0x45, 0x46, 0x92, 0x27, 0x5e, 0x55, 0x2f, 0x8c, 0xa3, 0xa5, 0x7d, 0x69, 0xd5, 0x95, 0x3b,
    0x07, 0x58, 0xb3, 0x40, 0x86, 0xac, 0x1d, 0xf7, 0x30, 0x37, 0x6b, 0xe4, 0x88, 0xd9, 0xe7, 0x89,
    0xe1, 0x1b, 0x83, 0x49, 0x4c, 0x3f, 0xf8, 0xfe, 0x8d, 0x53, 0xaa, 0x90, 0xca, 0xd8, 0x85, 0x61,
    0x20, 0x71, 0x67, 0xa4, 0x2d, 0x2b, 0x09, 0x5b, 0xcb, 0x9b, 0x25, 0xd0, 0xbe, 0xe5, 0x6c, 0x52,
    0x59, 0xa6, 0x74, 0xd2, 0xe6, 0xf4, 0xb4, 0xc0, 0xd1, 0x66, 0xaf, 0xc2, 0x39, 0x4b, 0x63, 0xb6]

pi_rev = [0xA5, 0x2D, 0x32, 0x8F, 0x0E, 0x30, 0x38, 0xC0, 0x54, 0xE6, 0x9E, 0x39, 0x55, 0x7E, 0x52, 0x91,
    0x64, 0x03, 0x57, 0x5A, 0x1C, 0x60, 0x07, 0x18, 0x21, 0x72, 0xA8, 0xD1, 0x29, 0xC6, 0xA4, 0x3F,
    0xE0, 0x27, 0x8D, 0x0C, 0x82, 0xEA, 0xAE, 0xB4, 0x9A, 0x63, 0x49, 0xE5, 0x42, 0xE4, 0x15, 0xB7,
    0xC8, 0x06, 0x70, 0x9D, 0x41, 0x75, 0x19, 0xC9, 0xAA, 0xFC, 0x4D, 0xBF, 0x2A, 0x73, 0x84, 0xD5,
    0xC3, 0xAF, 0x2B, 0x86, 0xA7, 0xB1, 0xB2, 0x5B, 0x46, 0xD3, 0x9F, 0xFD, 0xD4, 0x0F, 0x9C, 0x2F,
    0x9B, 0x43, 0xEF, 0xD9, 0x79, 0xB6, 0x53, 0x7F, 0xC1, 0xF0, 0x23, 0xE7, 0x25, 0x5E, 0xB5, 0x1E,
    0xA2, 0xDF, 0xA6, 0xFE, 0xAC, 0x22, 0xF9, 0xE2, 0x4A, 0xBC, 0x35, 0xCA, 0xEE, 0x78, 0x05, 0x6B,
    0x51, 0xE1, 0x59, 0xA3, 0xF2, 0x71, 0x56, 0x11, 0x6A, 0x89, 0x94, 0x65, 0x8C, 0xBB, 0x77, 0x3C,
    0x7B, 0x28, 0xAB, 0xD2, 0x31, 0xDE, 0xC4, 0x5F, 0xCC, 0xCF, 0x76, 0x2C, 0xB8, 0xD8, 0x2E, 0x36,
    0xDB, 0x69, 0xB3, 0x14, 0x95, 0xBE, 0x62, 0xA1, 0x3B, 0x16, 0x66, 0xE9, 0x5C, 0x6C, 0x6D, 0xAD,
    0x37, 0x61, 0x4B, 0xB9, 0xE3, 0xBA, 0xF1, 0xA0, 0x85, 0x83, 0xDA, 0x47, 0xC5, 0xB0, 0x33, 0xFA,
    0x96, 0x6F, 0x6E, 0xC2, 0xF6, 0x50, 0xFF, 0x5D, 0xA9, 0x8E, 0x17, 0x1B, 0x97, 0x7D, 0xEC, 0x58,
    0xF7, 0x1F, 0xFB, 0x7C, 0x09, 0x0D, 0x7A, 0x67, 0x45, 0x87, 0xDC, 0xE8, 0x4F, 0x1D, 0x4E, 0x04,
    0xEB, 0xF8, 0xF3, 0x3E, 0x3D, 0xBD, 0x8A, 0x88, 0xDD, 0xCD, 0x0B, 0x13, 0x98, 0x02, 0x93, 0x80,
    0x90, 0xD0, 0x24, 0x34, 0xCB, 0xED, 0xF4, 0xCE, 0x99, 0x10, 0x44, 0x40, 0x92, 0x3A, 0x01, 0x26,
    0x12, 0x1A, 0x48, 0x68, 0xF5, 0x81, 0x8B, 0xC7, 0xD6, 0x20, 0x0A, 0x08, 0x00, 0x4C, 0xD7, 0x74]

l_vec = [1, 148, 32, 133, 16, 194, 192, 1,
    251, 1, 192, 194, 16, 133, 32, 148]

def expand_str(_in):
    if(len(_in) == block_size * 2):
        return _in
    res = _in
    res += ("1")
    expand_len = 32 - len(res) % 32
    for i in range(0, expand_len):
        res += ("0")
    return res


def execute(_lambda, input):
    out = []
    for i in range (0, len(input)):
        out.append(_lambda(unhexlify(input[i])))
    return out

def bytes_to_hex(input):
    out = []
    for i in range (0, len(input)):
        out.append(hexlify(input[i]))
    return out

def decrypt_block(block, key):
    round_key = round_keys(key)
    block = xor(block, round_key[9])
    for i in range(8, -1, -1):
        block = xor(reverse_s(reverse_l(block)), round_key[i])
    return block

def encrypt_block(block, key):
    round_key = round_keys(key)
    for i in range (0, 9):
        block = l(s(xor(block, round_key[i])))
    block = xor(block, round_key[9])
    return block
   
def xor(a, b):
    return bytes([a[i] ^ b[i] for i in range(0, block_size)])

def s(block):
    return bytes([pi[block[i]] for i in range (0, block_size)])

def g_f(a, b):
    c = 0
    for i in range(0, 8):
        if (b % 2):
            c ^= a
        hi_bit = a & 0x80
        a = (2 * a) % 256
        if (hi_bit):
            a ^= 0xc3
        b >>= 1
    return c

def r(block):
    block = block[::-1]
    res = [0] * block_size
    for i in range (15, -1, -1):
        if (i > 0):
            res[i-1] = block[i]
        res[15] ^= g_f(block[i], l_vec[i])
    return bytes(res[::-1])

def l(block):
    res = block
    for i in range(0, block_size):
        res = r(res)
    return bytes(res)

def f(input, c):
    return l(s(xor(input, c)))

def reverse_s(block):
    return([pi_rev[block[i]] for i in range(block_size)])

def reverse_r(block):
    block = block[::-1]
    res = [0] * block_size
    a0 = block[block_size - 1]
    for i in range(0, block_size):
        if i>0:
            res[i] = block[i - 1]
        a0 ^= g_f(res[i], l_vec[i])
    res[0] = a0
    return bytes(res[::-1])

def reverse_l(block):
    res = block
    for i in range(0, block_size):
        res = reverse_r(res)
    return bytes(res)

def sp(k1, k2, const):
    res = f(k1, const)
    return xor(k2, res), k1

def next_keys(k1, k2, const):
    for i in range (0, 8):
        k1, k2 = sp(k1, k2, const[i])
    return k1, k2

def round_keys(key):
    consts = []
    for i in range (0, block_size * 2):
        num = b'\x00' * (block_size - 1) + bytes([i + 1])
        consts.append(l(num))
    round_key = list()
    round_key.append(key[:block_size])
    round_key.append(key[block_size:])
    for i in range(0, 4):
        k1 = round_key[-2]
        k2 = round_key[-1]
        k1, k2 = next_keys(k1, k2, consts[8 * i: 8 * (i + 1)])
        round_key.append(k1)
        round_key.append(k2)
    return round_key

def get_message_from_terminal():
    str = input()
    return str

def read_file(filename):
    f = open(filename, 'r')
    str = f.read()
    return str

def write_to_file(filename, data):
    f = open(filename, 'w')
    f.write(data)


string = ""
print("Read from (f)ile or (t)erminal?")
res = input()
match res:
    case "t": 
        string = get_message_from_terminal()
    case "f":
        string = read_file("in.txt")

print(f"Your input = {string}")

blocks_str = []
blocks_str = [string[i:i + 32] for i in range(0, len(string), 32)]
blocks_amount = len(blocks_str)
blocks = [0] * blocks_amount

for i in range (0, len(blocks_str)):
    blocks[i] = [expand_str(blocks_str[i])]

encrypted_blocks = [0] * blocks_amount
decrypted_blocks = [0] * blocks_amount

dict_enc = {}
dict_dec = {}
for i in range (0, blocks_amount):
    str = blocks[i][0]
    if str in dict_enc:
        encrypted_blocks[i] = dict_enc[str]
    else:
        encrypted = execute(lambda x: encrypt_block(x, key), blocks[i])
        encrypted_blocks[i] = bytes_to_hex(encrypted)
        dict_enc[str] = encrypted_blocks[i]
    if encrypted_blocks[i][0] in dict_dec:
        decrypted_blocks[i] = dict_dec[encrypted_blocks[i][0]]
    else:
        decrypted = execute(lambda x: decrypt_block(x, key), encrypted_blocks[i])
        decrypted_blocks[i] = bytes_to_hex(decrypted)
        dict_dec[encrypted_blocks[i][0]] = decrypted_blocks[i]


f = open("out.txt", "w")
f.write("Encrypted\n")
for j in range (0, blocks_amount):
    for i in range (0, len(encrypted_blocks[j])):
        f.write(encrypted_blocks[j][i].decode("utf-8"))
        f.write("\n")


f.write("Decrypted\n")
for j in range(0, blocks_amount):
    for i in range (0, len(decrypted_blocks[j])):
        f.write(decrypted_blocks[j][i].decode("utf-8"))
        f.write("\n")